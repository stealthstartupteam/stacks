AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A /20 VPC with 3 private subnets, 3 public subnets, 3 NAT ENIs, all routing
  and default ACLs.
Parameters:
  PublicSubnet2:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/24'
    Type: String
    Description: A /24 sized CIDR Block designated for Public use
  PublicSubnet1:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/24'
    Type: String
    Description: A /24 sized CIDR Block designated for Public use
  PublicSubnet3AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PublicSubnet3, e.g. us-east-1c'
  PublicSubnet3:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/24'
    Type: String
    Description: A /24 sized CIDR Block designated for Public use
  VPCSubnet:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/20'
    Type: String
    Description: A /20 sized CIDR block for the entire VPC
  PublicSubnet2AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PublicSubnet2, e.g. us-east-1b'
  PrivateSubnet1:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/22'
    Type: String
    Description: A /22 sized CIDR Block designated for Private use
  PrivateSubnet2:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/22'
    Type: String
    Description: A /22 sized CIDR Block designated for Private use
  PrivateSubnet3:
    AllowedPattern: '[0-9]+.[0-9]+.[0-9]+.[0-9]+/22'
    Type: String
    Description: A /22 sized CIDR Block designated for Private use
  Environment:
    Type: String
    Description: Environment
  PrivateSubnet1AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PrivateSubnet1, e.g. us-east-1a'
  PrivateSubnet3AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PrivateSubnet3, e.g. us-east-1c'
  PrivateSubnet2AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PrivateSubnet2, e.g. us-east-1b'
  PublicSubnet1AZ:
    AllowedPattern: '[a-z]+-[a-z]+-[0-9][a-z]'
    Type: String
    Description: 'Availability Zone for PublicSubnet1, e.g. us-east-1a'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCSubnet
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref Environment
              - vpc
        - Key: vpc
          Value: !Ref Environment
        - Key: service
          Value: vpc
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref Environment
              - gateway
        - Key: service
          Value: internetgateway
  PublicSubnet1Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref Environment
              - public
              - subnet1
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1
      AvailabilityZone: !Ref PublicSubnet1AZ
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - rtb1
          Key: Name
  InboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      PortRange:
        To: '65535'
        From: '0'
      Egress: 'false'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0            
  NexusNATInstanceENI3:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet3Id
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref NexusNATSecurityGroup
      Description: >-
        Interface for use with the NAT Instance in PublicSubnet3 for
        PrivateSubnet3
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - nat
              - eni3
          Key: Name
        - Value: nat
          Key: service
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - acl
          Key: Name
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1Id
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2Id
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3Id
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet3Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - subnet3
          Key: Name
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3
      AvailabilityZone: !Ref PrivateSubnet3AZ
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - rtb2
          Key: Name
  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - rtb3
          Key: Name
  NexusNATSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - ToPort: '65535'
          IpProtocol: '-1'
          CidrIp: !Ref VPCSubnet
          FromPort: '1'
      VpcId: !Ref VPC
      GroupDescription: Security Group for NAT Instance
  PrivateSubnet2Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - subnet2
          Key: Name
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2
      AvailabilityZone: !Ref PrivateSubnet2AZ
  NexusVPNSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - ToPort: '65535'
          IpProtocol: '-1'
          CidrIp: !Ref VPCSubnet
          FromPort: '1'
      VpcId: !Ref VPC
      GroupDescription: Security Group for VPN Instance
  PrivateSubnet1Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - private
              - subnet1
          Key: Name
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1
      AvailabilityZone: !Ref PrivateSubnet1AZ
  NexusVPNInstanceEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PrivateSubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3Id
      RouteTableId: !Ref PrivateRouteTable3
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2Id
      RouteTableId: !Ref PrivateRouteTable2
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - public
              - acl
          Key: Name
  NexusNATInstanceEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NexusNATInstanceEIP3:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NexusNATInstanceEIP2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable1
      NetworkInterfaceId: !Ref NexusNATInstanceENI1
  PrivateRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable3
      NetworkInterfaceId: !Ref NexusNATInstanceENI3
  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable2
      NetworkInterfaceId: !Ref NexusNATInstanceENI2
  PublicSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3Id
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2Id
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1Id
      NetworkAclId: !Ref PublicNetworkAcl                
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - public
              - rtb
          Key: Name
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1Id
      RouteTableId: !Ref PrivateRouteTable1
  AssociateNexusNATInstanceENI1:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref NexusNATInstanceENI1
      AllocationId: !GetAtt 
        - NexusNATInstanceEIP1
        - AllocationId
  PublicSubnet2Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - public
              - subnet2
          Key: Name
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2
      AvailabilityZone: !Ref PublicSubnet2AZ
  PublicSubnet3Id:
    Type: 'AWS::EC2::Subnet'
    Properties:
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - public
              - subnet3
          Key: Name
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3
      AvailabilityZone: !Ref PublicSubnet3AZ
  NexusNATInstanceENI1:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet1Id
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref NexusNATSecurityGroup
      Description: >-
        Interface for use with the NAT Instance in PublicSubnet1 for
        PrivateSubnet1
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - nat
              - eni1
          Key: Name
  InboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      PortRange:
        To: '65535'
        From: '1'
      Egress: 'false'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  NexusNATInstanceENI2:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref PublicSubnet2Id
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref NexusNATSecurityGroup
      Description: >-
        Interface for use with the NAT Instance in PublicSubnet2 for
        PrivateSubnet2
      Tags:
        - Value: !Join 
            - '-'
            - - !Ref Environment
              - nat
              - eni2
          Key: Name
  AssociateNexusNATInstanceENI2:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref NexusNATInstanceENI2
      AllocationId: !GetAtt 
        - NexusNATInstanceEIP2
        - AllocationId
  AssociateNexusNATInstanceENI3:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      NetworkInterfaceId: !Ref NexusNATInstanceENI3
      AllocationId: !GetAtt 
        - NexusNATInstanceEIP3
        - AllocationId
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      PortRange:
        To: '65535'
        From: '1'
      Egress: 'true'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  OutBoundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      PortRange:
        To: '65535'
        From: '0'
      Egress: 'true'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PrivateSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1Id
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2Id
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3Id
      NetworkAclId: !Ref PrivateNetworkAcl
Outputs:
  VPNInstanceEIPAllocId:
    Value: !GetAtt 
      - NexusVPNInstanceEIP1
      - AllocationId
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - VPCId
  StandardVpcId:
    Value: !Ref VPC
    Export:
      Name: dev-vpc-VPCId
  StandardPrivateSubnet3Id:
    Value: !Ref PrivateSubnet3Id
    Export:
      Name: dev-vpc-PrivateSubnet3Id
  StandardPrivateSubnet2Id:
    Value: !Ref PrivateSubnet2Id
    Export:
      Name: dev-vpc-PrivateSubnet2Id
  StandardPrivateSubnet1Id:
    Value: !Ref PrivateSubnet1Id
    Export:
      Name: dev-vpc-PrivateSubnet1Id 
  StandardPublicSubnet1Id:
    Value: !Ref PublicSubnet1Id
    Export:
      Name: dev-vpc-PublicSubnet1Id
  StandardPublicSubnet2Id:
    Value: !Ref PublicSubnet2Id
    Export:
      Name: dev-vpc-PublicSubnet2Id
  StandardPublicSubnet3Id:
    Value: !Ref PublicSubnet3Id
    Export:
      Name: dev-vpc-PublicSubnet3Id
  PrivateSubnet3Id:
    Value: !Ref PrivateSubnet3Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PrivateSubnet3Id
  NATInstanceENIId2:
    Value: !Ref NexusNATInstanceENI2
  NATInstanceENIId3:
    Value: !Ref NexusNATInstanceENI3
  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PrivateSubnet2Id
  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PrivateSubnet1Id
  PublicSubnet1Id:
    Value: !Ref PublicSubnet1Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PublicSubnet1Id
  PublicSubnet2Id:
    Value: !Ref PublicSubnet2Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PublicSubnet2Id
  NATInstanceENIId1:
    Value: !Ref NexusNATInstanceENI1
  VPNInstanceEIP:
    Value: !Ref NexusVPNInstanceEIP1
  PublicSubnet3Id:
    Value: !Ref PublicSubnet3Id
    Export:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PublicSubnet3Id
